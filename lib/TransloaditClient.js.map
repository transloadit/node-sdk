{"version":3,"sources":["../src/TransloaditClient.js"],"names":["reqr","global","GENTLY","hijack","require","request","crypto","_","fs","path","retry","PaginationStream","Readable","tus","unknownErrMsg","TransloaditClient","opts","useSsl","authKey","Error","authSecret","_authKey","_authSecret","_service","service","_protocol","_streams","_tus_streams","_lastUsedAssemblyUrl","name","stream","pause","createReadStream","on","console","error","err","addStream","cb","progressCb","defaultOpts","params","fields","waitForCompletion","isResumable","extend","callback","called","result","_serviceUrl","streams","label","push","requestOpts","url","method","timeout","_canGetStreamSizes","tus_num_expected_upload_files","length","Object","keys","warn","sendRequest","_remoteJson","awaitAssemblyCompletion","assembly_id","tusOpts","assembly","_sendTusRequest","ncompleted","streamErrCb","Array","from","access","F_OK","R_OK","assemblyId","getAssembly","ok","setTimeout","assemblyProgress","assembly_url","notifyUrl","notify_url","pageno","listAssemblyNotifications","page","listAssemblies","retryOpts","retries","factor","minTimeout","maxTimeout","operation","attempt","mainError","assembly_ssl_url","left","message","templateId","listTemplates","month","jsonParams","_prepareParams","signature","_calcSignature","toSign","createHmac","update","Buffer","digest","req","sigData","calcSignature","form","append","key","val","isObject","isArray","JSON","stringify","each","value","indexOf","encodeURIComponent","auth","expires","_getExpiresDate","expiresDate","Date","setDate","getDate","toISOString","__remoteJson","info","retryIn","_timeouts","unshift","code","undefined","msg","join","_appendParamsToUrl","uri","headers","body","statusCode","parse","e","abbr","substr","extraData","_appendForm","httpModule","onProgress","uploadsDone","streamLabels","tlClient","totalBytes","lastEmittedProgress","uploadProgresses","file","stat","size","uploadSize","onTusProgress","bytesUploaded","uploadedBytes","reduce","label1","label2","uploadProgress","filename","basename","tusUpload","Upload","endpoint","tus_url","resume","metadata","fieldname","onError","onSuccess","start","module","exports"],"mappings":"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","file":"TransloaditClient.js","sourcesContent":["const reqr = global.GENTLY ? GENTLY.hijack(require) : require\nconst request = reqr('request')\nconst crypto = reqr('crypto')\nconst _ = reqr('underscore')\nconst fs = reqr('fs')\nconst path = reqr('path')\nconst retry = reqr('retry')\nconst PaginationStream = reqr('./PaginationStream')\nconst Readable = reqr('stream').Readable\nconst tus = reqr('tus-js-client')\n\nlet unknownErrMsg = 'Unknown error. Please report this at '\nunknownErrMsg += 'https://github.com/transloadit/node-sdk/issues/new?title=Unknown%20error'\n\nclass TransloaditClient {\n  constructor (opts = {}) {\n    if (opts.useSsl == null) {\n      opts.useSsl = true\n    }\n\n    if (opts.authKey == null) {\n      throw new Error('Please provide an authKey')\n    }\n\n    if (opts.authSecret == null) {\n      throw new Error('Please provide an authSecret')\n    }\n\n    this._authKey = opts.authKey\n    this._authSecret = opts.authSecret\n    this._service = opts.service || 'api2.transloadit.com'\n    this._protocol = opts.useSsl ? 'https://' : 'http://'\n    this._streams = {}\n    this._tus_streams = {}\n\n    this._lastUsedAssemblyUrl = ''\n  }\n\n  /**\n   * Adds an Assembly file stream\n   *\n   * @param {string} name fieldname of the file\n   * @param {ReadableStream} stream stream to be uploaded\n   */\n  addStream (name, stream) {\n    stream.pause()\n    this._streams[name] = stream\n  }\n\n  /**\n   * Adds an Assembly file\n   *\n   * @param {string} name field name of the file\n   * @param {string} path path to the file\n   */\n  addFile (name, path) {\n    const stream = fs.createReadStream(path)\n    stream.on('error', err => {\n      // handle the error event to avoid the error being thrown\n      console.error(err)\n    })\n    this.addStream(name, stream)\n  }\n\n  getLastUsedAssemblyUrl () {\n    return this._lastUsedAssemblyUrl\n  }\n\n  /**\n   * Create an Assembly\n   *\n   * @typedef {object} progressObject\n   * @property {object} assemblyProgress\n   * @property {{totalBytes: number, uploadedBytes: number}} uploadProgress\n   *\n   * @callback onProgress\n   * @param {progressObject} progress\n   *\n   * @param {object} opts assembly options\n   * @param {function} cb callback function for when assembly is submitted/done\n   * @param {onProgress} progressCb callback function to be triggered as on each progress update of the assembly\n   */\n  createAssembly (opts, cb, progressCb) {\n    const defaultOpts = {\n      params: {},\n      fields: {},\n      waitForCompletion: false,\n      isResumable: true\n    }\n    opts = _.extend(defaultOpts, opts)\n\n    let stream\n    const callback = cb\n    let called = false\n    cb = (err, result) => {\n      if (!called) {\n        called = true\n        callback(err, result)\n      }\n    }\n\n    this._lastUsedAssemblyUrl = `${this._serviceUrl()}/assemblies`\n\n    const streams = (() => {\n      const result = []\n      for (let label in this._streams) {\n        stream = this._streams[label]\n        result.push(stream)\n      }\n      return result\n    })()\n\n    let requestOpts = {\n      url: this._lastUsedAssemblyUrl,\n      method: 'post',\n      timeout: 24 * 60 * 60 * 1000, // 1 day\n      params: opts.params,\n      fields: opts.fields,\n    }\n\n    if (opts.isResumable && this._canGetStreamSizes()) {\n      requestOpts.tus_num_expected_upload_files = streams.length\n      // transfer streams to tus streams so they don't get uploaded as multipart\n      for (const label of Object.keys(this._streams)) {\n        this._tus_streams[label] = this._streams[label]\n        delete this._streams[label]\n      }\n    } else if (opts.isResumable) {\n      opts.isResumable = false\n      console.warn('disabling resumability because the size of one or more streams cannot be determined')\n    }\n\n    const sendRequest = () => {\n      this._remoteJson(requestOpts, (err, result = {}) => {\n        // reset streams so they do not get used again in subsequent requests\n        this._streams = {}\n\n        if (!err && result.error != null) {\n          err = new Error(result.error)\n        }\n\n        if (err) {\n          return cb(err)\n        }\n\n        if (!opts.isResumable) {\n          if (!opts.waitForCompletion) {\n            return cb(null, result)\n          }\n\n          return this.awaitAssemblyCompletion(result.assembly_id, cb, progressCb)\n        }\n\n        const tusOpts = { waitForCompletion: opts.waitForCompletion, assembly: result }\n        this._sendTusRequest(tusOpts, cb, progressCb)\n      })\n    }\n\n    let ncompleted = 0\n    const streamErrCb = err => {\n      if (err != null) {\n        cb(err)\n      }\n\n      if (++ncompleted === streams.length) {\n        sendRequest()\n      }\n    }\n\n    for (stream of Array.from(streams)) {\n      stream.on('error', cb)\n\n      // because an http response stream could also have a \"path\"\n      // attribute but not referring to the local file system\n      // see https://github.com/transloadit/node-sdk/pull/50#issue-261982855\n      if (stream.path == null || !(stream instanceof Readable)) {\n        streamErrCb(null)\n        continue\n      }\n\n      fs.access(stream.path, fs.F_OK | fs.R_OK, err => {\n        if (err != null) {\n          return streamErrCb(err)\n        }\n\n        streamErrCb(null)\n      })\n    }\n\n    // make sure sendRequest gets called when there are no @_streams\n    if (streams.length === 0) {\n      sendRequest()\n    }\n  }\n\n  awaitAssemblyCompletion (assemblyId, cb, progressCb) {\n    this.getAssembly(assemblyId, (err, result) => {\n      if (!err && result.error != null) {\n        err = new Error(result.error)\n      }\n\n      if (err) {\n        return cb(err)\n      }\n\n      if (result.ok === 'ASSEMBLY_COMPLETED') {\n        return cb(null, result)\n      }\n\n      if (result.ok === 'ASSEMBLY_UPLOADING' || result.ok === 'ASSEMBLY_EXECUTING') {\n        setTimeout(() => {\n          this.awaitAssemblyCompletion(assemblyId, cb)\n        }, 1 * 1000)\n\n        if (progressCb) {\n          progressCb({assemblyProgress: result})\n        }\n\n        return\n      }\n\n      return cb(new Error(unknownErrMsg))\n    })\n  }\n\n  /**\n   * Delete the assembly\n   *\n   * @param {string} assemblyId assembly ID\n   * @param {function} cb callback function after the assembly is deleted\n   */\n  deleteAssembly (assemblyId, cb) {\n    this.getAssembly(assemblyId, (err, { assembly_url } = {}) => {\n      if (err != null) {\n        return cb(err)\n      }\n\n      const opts = {\n        url    : assembly_url,\n        timeout: 5000,\n        method : 'del',\n        params : {},\n      }\n\n      this._remoteJson(opts, cb)\n    })\n  }\n\n  /**\n   * Replay an Assembly\n   *\n   * @typedef {object} replayOptions\n   * @property {string} assembly_id\n   * @property {string} notify_url\n   *\n   * @param {replayOptions} opts options defining the Assembly to replay\n   * @param {function} cb callback function after the replay is started\n   */\n  replayAssembly (opts, cb) {\n    const { assembly_id: assemblyId, notify_url: notifyUrl } = opts\n    const requestOpts = {\n      url   : this._serviceUrl() + `/assemblies/${assemblyId}/replay`,\n      method: 'post',\n    }\n\n    if (notifyUrl != null) {\n      requestOpts.params = { notifyUrl }\n    }\n\n    this._remoteJson(requestOpts, cb)\n  }\n\n  /**\n   * Replay an Assembly notification\n   *\n   * @param {replayOptions} opts options defining the Assembly to replay\n   * @param {function} cb callback function after the replay is started\n   */\n  replayAssemblyNotification ({ assembly_id: assemblyId, notify_url: notifyUrl }, cb) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/assembly_notifications/${assemblyId}/replay`,\n      method: 'post',\n    }\n\n    if (notifyUrl != null) {\n      requestOpts.params = { notifyUrl }\n    }\n\n    this._remoteJson(requestOpts, cb)\n  }\n\n  /**\n   * List all assembly notifications\n   *\n   * @param {object} params optional request options\n   * @param {function} cb callback function triggered with the list of Assembly notifications\n   */\n  listAssemblyNotifications (params, cb) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/assembly_notifications`,\n      method: 'get',\n      params: params || {},\n    }\n\n    this._remoteJson(requestOpts, cb)\n  }\n\n  streamAssemblyNotifications (params) {\n    return new PaginationStream((pageno, cb) => {\n      this.listAssemblyNotifications(_.extend({}, params, { page: pageno }), cb)\n    })\n  }\n\n  /**\n   * List all assemblies\n   *\n   * @param {object} params optional request options\n   * @param {function} cb callback function triggered with the list of Assemblies\n   */\n  listAssemblies (params, cb) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/assemblies`,\n      method: 'get',\n      params: params || {},\n    }\n\n    this._remoteJson(requestOpts, cb)\n  }\n\n  streamAssemblies (params) {\n    return new PaginationStream((pageno, cb) => {\n      this.listAssemblies(_.extend({}, params, { page: pageno }), cb)\n    })\n  }\n\n  /**\n   * Get an Assembly\n   *\n   * @param {string} assemblyId the Assembly Id\n   * @param {function} cb callback function triggered with the retrieved Assembly\n   */\n  getAssembly (assemblyId, cb) {\n    const opts = { url: this._serviceUrl() + `/assemblies/${assemblyId}` }\n\n    const retryOpts = {\n      retries   : 5,\n      factor    : 3.28,\n      minTimeout: 1 * 1000,\n      maxTimeout: 8 * 1000,\n    }\n\n    const operation = retry.operation(retryOpts)\n    operation.attempt(attempt => {\n      this._remoteJson(opts, (err, result) => {\n        if (err != null) {\n          if (operation.retry(err)) {\n            return\n          }\n\n          return cb(operation.mainError())\n        }\n\n        if (result.assembly_url == null || result.assembly_ssl_url == null) {\n          if (operation.retry(new Error('got incomplete assembly status response'))) {\n            return\n          }\n\n          return cb(operation.mainError())\n        }\n\n        cb(null, result)\n      })\n    })\n  }\n\n  /**\n   * Create an Assembly Template\n   *\n   * @param {object} params optional request options\n   * @param {function} cb callback function triggered when the template is created\n   */\n  createTemplate (params, cb) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates`,\n      method: 'post',\n      params: params || {},\n    }\n\n    this._remoteJson(requestOpts, (err, result) => {\n      let left\n      if (err) {\n        return cb(err)\n      }\n\n      if (result && result.ok) {\n        return cb(null, result)\n      }\n\n      err = new Error((left = result.error != null ? result.error : result.message) != null ? left : unknownErrMsg)\n      cb(err)\n    })\n  }\n\n  /**\n   * Edit an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @param {object} params optional request options\n   * @param {function} cb callback function triggered when the template is edited\n   */\n  editTemplate (templateId, params, cb) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates/${templateId}`,\n      method: 'put',\n      params: params || {},\n    }\n\n    this._remoteJson(requestOpts, (err, result) => {\n      let left\n      if (err) {\n        return cb(err)\n      }\n\n      if (result && result.ok) {\n        return cb(null, result)\n      }\n\n      err = new Error((left = result.error != null ? result.error : result.message) != null ? left : unknownErrMsg)\n      cb(err)\n    })\n  }\n\n  /**\n   * Delete an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @param {function} cb callback function triggered when the template is deleted\n   */\n  deleteTemplate (templateId, cb) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/templates/${templateId}`,\n      method: 'del',\n      params: {},\n    }\n\n    this._remoteJson(requestOpts, cb)\n  }\n\n  /**\n   * Get an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @param {function} cb callback function triggered when the template is retrieved\n   */\n  getTemplate (templateId, cb) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates/${templateId}`,\n      method: 'get',\n      params: {},\n    }\n\n    this._remoteJson(requestOpts, cb)\n  }\n\n  /**\n   * List all Assembly Templates\n   *\n   * @param {object} params optional request options\n   * @param {function} cb callback function triggered when the templates are retrieved\n   */\n  listTemplates (params, cb) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates`,\n      method: 'get',\n      params: params || {},\n    }\n\n    this._remoteJson(requestOpts, cb)\n  }\n\n  streamTemplates (params) {\n    return new PaginationStream((pageno, cb) => {\n      this.listTemplates(_.extend({}, params, { page: pageno }), cb)\n    })\n  }\n\n  /**\n   * Get account Billing details for a specific month\n   *\n   * @param {string} month the date for the required billing in the format yyyy-mm\n   * @param {function} cb callback function triggered when the billing is retrieved\n   */\n  getBill (month, cb) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/bill/${month}`,\n      method: 'get',\n      params: {},\n    }\n\n    this._remoteJson(requestOpts, cb)\n  }\n\n  calcSignature (params) {\n    const jsonParams = this._prepareParams(params)\n    const signature = this._calcSignature(jsonParams)\n\n    return { signature, params: jsonParams }\n  }\n\n  _calcSignature (toSign) {\n    return crypto\n      .createHmac('sha1', this._authSecret)\n      .update(Buffer.from(toSign, 'utf-8'))\n      .digest('hex')\n  }\n\n  // Sets the multipart/form-data for POST, PUT and DELETE requests, including\n  // the streams, the signed params, and any additional fields.\n  _appendForm (req, params, fields) {\n    const sigData = this.calcSignature(params)\n    const jsonParams = sigData.params\n    const { signature } = sigData\n    const form = req.form()\n\n    form.append('params', jsonParams)\n\n    if (fields == null) {\n      fields = {}\n    }\n\n    for (let key in fields) {\n      let val = fields[key]\n      if (_.isObject(fields[key]) || _.isArray(fields[key])) {\n        val = JSON.stringify(fields[key])\n      }\n\n      form.append(key, val)\n    }\n\n    form.append('signature', signature)\n\n    _.each(this._streams, (value, key) => form.append(key, value))\n  }\n\n  // Implements HTTP GET query params, handling the case where the url already\n  // has params.\n  _appendParamsToUrl (url, params) {\n    const sigData = this.calcSignature(params)\n    const { signature } = sigData\n    let jsonParams = sigData.params\n\n    if (url.indexOf('?') === -1) {\n      url += `?signature=${signature}`\n    } else {\n      url += `&signature=${signature}`\n    }\n\n    jsonParams = encodeURIComponent(jsonParams)\n    url += `&params=${jsonParams}`\n\n    return url\n  }\n\n  // Responsible for including auth parameters in all requests\n  _prepareParams (params) {\n    if (params == null) {\n      params = {}\n    }\n    if (params.auth == null) {\n      params.auth = {}\n    }\n    if (params.auth.key == null) {\n      params.auth.key = this._authKey\n    }\n    if (params.auth.expires == null) {\n      params.auth.expires = this._getExpiresDate()\n    }\n\n    return JSON.stringify(params)\n  }\n\n  _getExpiresDate () {\n    const expiresDate = new Date()\n    expiresDate.setDate(expiresDate.getDate() + 1)\n    return expiresDate.toISOString()\n  }\n\n  _serviceUrl () {\n    return this._protocol + this._service\n  }\n\n  // Wrapper around __remoteJson which will retry in case of error\n  _remoteJson (opts, cb) {\n    const operation = retry.operation({\n      retries   : 5,\n      factor    : 3.28,\n      minTimeout: 1 * 1000,\n      maxTimeout: 8 * 1000,\n    })\n\n    operation.attempt(() => {\n      this.__remoteJson(opts, (err, result) => {\n        if (err != null) {\n          if (err.error === 'RATE_LIMIT_REACHED') {\n            console.warn(`Rate limit reached, retrying request in ${err.info.retryIn} seconds.`)\n            // FIXME uses private internals of node-retry\n            operation._timeouts.unshift(1000 * err.info.retryIn)\n            return operation.retry(err)\n          }\n\n          if (err.code === 'ENOTFOUND') {\n            console.warn(`The network connection is down, retrying request in 3 seconds.`)\n            // FIXME uses private internals of node-retry\n            operation._timeouts.unshift(3 * 1000)\n            return operation.retry(err)\n          }\n\n          if (err.error === 'GET_ACCOUNT_UNKNOWN_AUTH_KEY') {\n            console.warn(`Invalid auth key provided.`)\n            return cb(err)\n          }\n\n          if (err.error !== undefined) {\n            let msg = []\n            if (err.error) { msg.push(err.error) }\n            if (opts.url) { msg.push(opts.url) }\n            if (err.message) { msg.push(err.message) }\n            \n            console.warn(msg.join(' - '))\n            return cb(err)\n          }\n        }\n\n        if (operation.retry(err)) {\n          return\n        }\n\n        let mainError = null\n        if (err) {\n          mainError = operation.mainError()\n        }\n\n        cb(mainError, result)\n      })\n    })\n  }\n\n  // Responsible for making API calls. Automatically sends streams with any POST,\n  // PUT or DELETE requests. Automatically adds signature parameters to all\n  // requests. Also automatically parses the JSON response.\n  __remoteJson (opts, cb) {\n    const timeout = opts.timeout || 5000\n    let url = opts.url || null\n    const method = opts.method || 'get'\n\n    if (!url) {\n      const err = new Error('No url provided!')\n      return cb(err)\n    }\n\n    if (method === 'get' && opts.params != null) {\n      url = this._appendParamsToUrl(url, opts.params)\n    }\n\n    const requestOpts = {\n      uri: url,\n      timeout,\n    }\n\n    if (opts.headers != null) {\n      requestOpts.headers = opts.headers\n    }\n\n    const req = request[method](requestOpts, (err, { body, statusCode } = {}) => {\n      if (err) {\n        return cb(err)\n      }\n\n      // parse body\n      let result = null\n      try {\n        result = JSON.parse(body)\n      } catch (e) {\n        const abbr = `${body}`.substr(0, 255)\n        let msg = `Unable to parse JSON from '${requestOpts.uri}'. `\n        msg += `Code: ${statusCode}. Body: ${abbr}. `\n        return cb(new Error(msg))\n      }\n      if (statusCode !== 200 && statusCode !== 404 && statusCode >= 400 && statusCode <= 599) {\n        return cb(_.extend(new Error(), result))\n      }\n\n      return cb(null, result)\n    })\n\n    if (method === 'post' || method === 'put' || method === 'del') {\n      const extraData = Object.assign({}, opts.fields)\n      if (opts.tus_num_expected_upload_files) {\n        extraData.tus_num_expected_upload_files = opts.tus_num_expected_upload_files\n      }\n      this._appendForm(req, opts.params, extraData)\n    }\n  }\n\n  // @todo support size retrieval for other streams\n  _canGetStreamSizes () {\n    for (const label in this._streams) {\n      const stream = this._streams[label]\n      // the request module has path attribute that is different from file path\n      // but it also has the attribute httpModule\n      if (!(stream.path && !stream.httpModule)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  _sendTusRequest (opts, cb, onProgress) {\n    let uploadsDone = 0\n    const streamLabels = Object.keys(this._tus_streams)\n    const tlClient = this\n    let totalBytes = 0\n    let lastEmittedProgress = 0\n    let uploadProgresses = {}\n    onProgress = onProgress || (() => {})\n    for (const label of streamLabels) {\n      const file = this._tus_streams[label]\n      fs.stat(file.path, (err, {size}) => {\n        if (err) {\n          return cb(err)\n        }\n\n        const uploadSize = size\n        totalBytes += uploadSize\n        uploadProgresses[label] = 0\n        const onTusProgress = (bytesUploaded) => {\n          uploadProgresses[label] = bytesUploaded\n          // get all uploaded bytes for all files\n          const uploadedBytes = streamLabels.reduce((label1, label2) => {\n            return uploadProgresses[label1] + uploadProgresses[label2]\n          })\n          // don't send redundant progress\n          if (lastEmittedProgress < uploadedBytes) {\n            lastEmittedProgress = uploadedBytes\n            onProgress({ uploadProgress: { uploadedBytes, totalBytes } })\n          }\n        }\n\n        const filename = file.path ? path.basename(file.path) : label\n        const tusUpload = new tus.Upload(file, {\n          endpoint: opts.assembly.tus_url,\n          resume: true,\n          metadata: {\n            assembly_url: opts.assembly.assembly_ssl_url,\n            fieldname: label,\n            filename\n          },\n          uploadSize,\n          onError: cb,\n          onProgress: onTusProgress,\n          onSuccess() {\n            uploadsDone++\n            if (uploadsDone === streamLabels.length) {\n              tlClient._tus_streams = {}\n              if (opts.waitForCompletion) {\n                tlClient.awaitAssemblyCompletion(opts.assembly.assembly_id, cb, onProgress)\n              } else {\n                cb(null, opts.assembly)\n              }\n            }\n          }\n        })\n\n        tusUpload.start()\n      })\n    }\n  }\n}\n\nmodule.exports = TransloaditClient\n"]}